name: CI/CD MLOps

on:
  push:
    branches: [master, desarrollo]
  pull_request:
    branches: [master]

env:
  MODEL_NAME: "realtor_rf"
  MODEL_STAGE: "Production"
  MLFLOW_URI: "http://mlflow:5000"

jobs:
################################################################################
# 1) LINT + TEST
################################################################################
  lint_and_validate:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"

      - name: Install dev deps
        run: |
          pip install --upgrade pip
          # Instala Airflow con su archivo de restricciones para Python 3.8
          # Esto es crucial para la estabilidad de Airflow y sus dependencias directas.
          pip install "apache-airflow==2.6.0" --constraint "https://raw.githubusercontent.com/apache/airflow/constraints-2.6.0/constraints-3.8.txt"
          
          # Instala las herramientas de linting y testing explícitamente
          pip install flake8 pytest joblib
          
          # Instala las dependencias de tu proyecto desde ml/requirements.txt
          # Asegúrate de que 'joblib', 'mlflow', y cualquier otra librería que necesiten tus DAGs/tests
          # estén listadas en ml/requirements.txt
          pip install -r ml/requirements.txt

      - name: Flake8
        run: flake8 --max-line-length=120 --ignore=E203,W503,F401,E302,W504,E221,E265,E303,E241,E272,E127,E261,W293,W292,E305,W291,E501,E111,E117 .
        
      - name: Syntax check
        run: python -m compileall .

      - name: Validate Airflow DAGs
        run: |
          export AIRFLOW_HOME=$(pwd)
          export AIRFLOW__CORE__DAGS_FOLDER=$(pwd)/dags
          airflow db init
          airflow dags list

      #- name: pytest
      #  run: pytest --maxfail=1 --disable-warnings -q

################################################################################
# 2) BUILD & PUSH
################################################################################
  build_and_push:
    runs-on: ubuntu-latest
    needs: lint_and_validate

    steps:
      - uses: actions/checkout@v3

      - uses: docker/setup-buildx-action@v2

      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build Airflow
        run: docker build -f airflow_dockerfile -t lccruzr9606/proyecto-airflow:latest .

      - name: Build API
        # Remove working-directory or set to root
        run: docker build -f api_dockerfile -t lccruzr9606/realtor-api:latest . # Dockerfile is in root, context is . (root)

      - name: Build MLflow
        run: docker build -f mlflow_dockerfile -t lccruzr9606/mlflow-server:latest .

      - name: Build Streamlit
        # working-directory: ui # Elimina o comenta esta línea
        run: docker build -f streamlit_dockerfile -t lccruzr9606/realtor-streamlit:latest .

      - name: Push images
        run: |
          docker push lccruzr9606/proyecto-airflow:latest
          docker push lccruzr9606/realtor-api:latest
          docker push lccruzr9606/mlflow-server:latest
          docker push lccruzr9606/realtor-streamlit:latest

################################################################################
# 3) INTEGRATION TEST
################################################################################
  integration_test:
    runs-on: ubuntu-latest
    needs: build_and_push

    services:
      docker:
        image: docker:20.10.16-dind
        options: --privileged
        ports:
          - 2375:2375

    steps:
      - uses: actions/checkout@v3

      - name: Login Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Pull images
        run: |
          export DOCKER_HOST=tcp://localhost:2375
          docker pull lccruzr9606/proyecto-airflow:latest
          docker pull lccruzr9606/realtor-api:latest
          docker pull lccruzr9606/mlflow-server:latest
          docker pull lccruzr9606/realtor-streamlit:latest

      - name: Prepare compose
        run: cp docker-compose.yml ci-docker-compose.yml

      - name: Compose up
        run: |
          export DOCKER_HOST=tcp://localhost:2375
          docker compose -f ci-docker-compose.yml up -d --wait

      - name: Wait for stack
        run: sleep 20

      - name: Smoke Realtor API
        run: |
          sleep 5
          response=$(curl -s -w "\nHTTP_CODE:%{http_code}" http://localhost:8000/health)
          http_code=$(echo "$response" | grep "HTTP_CODE" | cut -d':' -f2)
          
          echo "Respuesta del Health Check de la API:"
          echo "$response" | sed '$d' # Imprime el cuerpo del JSON sin la línea del http_code
          
          if [ "$http_code" = "200" ]; then
            echo "API health endpoint respondió con 200 OK."
            # Opcional: verificar un campo específico del JSON si quieres ser más estricto
            # api_status=$(echo "$response" | sed '$d' | jq -r .api_status)
            # if [ "$api_status" = "UP" ]; then
            #   echo "API status es UP."
            # else
            #   echo "API status NO es UP. Respuesta: $api_status"
            #   exit 1
            # fi
          else
            echo "API health endpoint falló con código $http_code."
            exit 1
          fi

      - name: Smoke MLflow
        run: |
          sleep 5 # Pequeña espera para el servicio de MLflow
          code=$(curl -s -o /dev/null -w '%{http_code}' http://localhost:5000) # MLflow UI
          if [ "$code" = "200" ]; then
            echo "MLflow UI respondió con 200 OK."
          else
            echo "MLflow UI falló con código $code."
            # curl -v http://localhost:5000 # Para más detalles en caso de error
            exit 1
          fi

      - name: Smoke Streamlit
        run: |
          sleep 5 # Pequeña espera para el servicio de Streamlit
          code=$(curl -s -o /dev/null -w '%{http_code}' http://localhost:8501)
          if [ "$code" = "200" ]; then
            echo "Streamlit UI respondió con 200 OK."
          else
            echo "Streamlit UI failed with código $code."
            # curl -v http://localhost:8501 # Para más detalles en caso de error
            exit 1
          fi

      - name: Compose down
        if: always()
        run: |
          export DOCKER_HOST=tcp://localhost:2375
          docker compose -f ci-docker-compose.yml down -v
